* 제약 조건
  1. 제공된 소스 nxui 관련 xml file 등에 대한 Compile 작업 필요.
     > Create batch file은          - check_COMPONENT_deploy.vbs
     > Configuration Compile Enable - make_dev_env_variable_files.vbs
     > Check Compile Target Files   -
     > Compile                      - Build Forge Project Steps.
     > Deploy Files                 - make_each_copy_XXX_XXX_XXX.vbs

* make_dev_env_variable_files.vbs /* Configuration Compile Enable */
  $ Target의 Compile 여부를 설정하는 환경 파일 구성.
  1. 이 경우 제공된 소스 파일에 대한 Compile 작업이 요구된다. 따라서 해당 파일 내에서 컴파일 명령을 수행하도록 설정할 필요가 있음.
     > EnvUiCommonDeploy 항목을 참조.
     > EnvCommonLibraryDeploy 항목을 참조.
     > EnvCompile 항목을 참조.
     > Deploy List File을 참조하여 작업을 수행.
       - 해당 Case의 경우 Deploy List에서 출력되는 형태를 참조(각 Attributes 및 Tags)
       - 상기 항목의 Data를 기준으로 Env 값을 설정.
  2. WAS_RESTART 등 기타 속성 값 참조.
     > nxui 의 경우 WAS_RESTART 를 요구하지 않는다.
  3. 해당하는 신규 변수의 설정.
     > Default Value는 No로 설정.
     > Deploy Target에 해당 nxui 항목이 존재하는 경우 Yes로 설정한다.
     > Deploy List에 nxui 항목이 존재하는 경우에는 Compile과 배포 작업 모두 진행해야 한다.
       - 해당 항목에 관련된 변수를 2개로 구분할지(Compile, Deploy) 하나의 변수로 통합하여 설정할지 결정(하나의 값으로 통합하여 사용해도 무방).

* make_each_copy_PRJSVR_TAGETTYPE_FILETYPE.vbs /* Deploy Files */
  $ Target의 Deploy Rule 구성.
  1. 배포 대상의 project name 을 참조.
  2. 배포 대상의 file extension(확장자)를 참조.
     > 배포 로직상의 규칙에 따라 수행한다.
     > 해당 Directory에 배포 대상과 상이한 항목을 Check.
  3. file deploy command 구성은 하기와 같은 형태로 구성된다.
     > mkdir -p 'file deploy path'
     > scp 'xxx':'xxx' 'Src file path' 'Target file path'

* check_COMPONENT_deploy.vbs /* Create batch file. */
  $ 해당 batch file은 TFS 최신 소스로 update 하기위한 batch file 생성을 목적으로 한다.
  1. file path / file name 입력.
  2. file 구성 기준
     > CompileSuccess 값이 Y인 경우
     > Rule에 따른 승인 파일 Count.
